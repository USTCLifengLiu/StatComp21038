// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gibbsC
NumericMatrix gibbsC(int N, int thin);
RcppExport SEXP _StatComp21038_gibbsC(SEXP NSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbsC(N, thin));
    return rcpp_result_gen;
END_RCPP
}
// sumC
double sumC(NumericVector x, int p);
RcppExport SEXP _StatComp21038_sumC(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(sumC(x, p));
    return rcpp_result_gen;
END_RCPP
}
// loglikeli
double loglikeli(double lambda, NumericVector tauinv2, int p);
RcppExport SEXP _StatComp21038_loglikeli(SEXP lambdaSEXP, SEXP tauinv2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tauinv2(tauinv2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikeli(lambda, tauinv2, p));
    return rcpp_result_gen;
END_RCPP
}
// EmpiricalBayes
NumericVector EmpiricalBayes(double L0, double tol, NumericVector tauinv2, int p, double lambda);
RcppExport SEXP _StatComp21038_EmpiricalBayes(SEXP L0SEXP, SEXP tolSEXP, SEXP tauinv2SEXP, SEXP pSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type L0(L0SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tauinv2(tauinv2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(EmpiricalBayes(L0, tol, tauinv2, p, lambda));
    return rcpp_result_gen;
END_RCPP
}
// HyperpriorBayes
double HyperpriorBayes(NumericVector tauinv2, int r, int d, int p);
RcppExport SEXP _StatComp21038_HyperpriorBayes(SEXP tauinv2SEXP, SEXP rSEXP, SEXP dSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tauinv2(tauinv2SEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(HyperpriorBayes(tauinv2, r, d, p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_StatComp21038_gibbsC", (DL_FUNC) &_StatComp21038_gibbsC, 2},
    {"_StatComp21038_sumC", (DL_FUNC) &_StatComp21038_sumC, 2},
    {"_StatComp21038_loglikeli", (DL_FUNC) &_StatComp21038_loglikeli, 3},
    {"_StatComp21038_EmpiricalBayes", (DL_FUNC) &_StatComp21038_EmpiricalBayes, 5},
    {"_StatComp21038_HyperpriorBayes", (DL_FUNC) &_StatComp21038_HyperpriorBayes, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_StatComp21038(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
